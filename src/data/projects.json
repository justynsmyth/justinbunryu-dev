{
    "projects": [
        {
            "title": "Portfolio Website",
            "startDate": "2025-09",
            "endDate" : "present",
            "description": "Single Page Application (SPA) portfolio",
            "technologies": [
                "React",
                "React Router",
                "TypeScript",
                "HTML+CSS"
            ],
            "categories": [
                "Web"
            ],
            "highlights": [
                "Implemented responsive design for mobile and desktop",
                "Reusable component architecture"
            ],
            "githubUrl": "https://github.com/justynsmyth/portfolio-react"
        },
        {
            "title": "Custom 2D Game Engine",
            "startDate": "2024-01",
            "endDate" : "2024-06",
            "description": "Multi-platform Unity style Game Engine (250+ commits) ",
            "technologies": [
                "C++",
                "OpenGL",
                "SDL",
                "Lua",
                "LuaBridge",
                "VTune Profiler"
            ],
            "categories": [
                "game",
                "backend"
            ],
            "highlights": [
                "OSX, Windows, Linux support",
                "Custom collision detection system for accurate gameplay physics",
                "Lua scripting language support",
                "OpenGL functionality for VR Tool support using SteamVR SDK",
                "cache-utilization + performance using data-oriented programming"
            ],
            "images": [
                "/GameEngine2.png"
            ],
            "githubUrl": "https://github.com/justynsmyth/Tsukuro",
            "videoDemos": [
                "https://www.youtube.com/watch?v=SoDKWItulzM",
                "https://www.youtube.com/watch?v=APmMv-3v4Zo"
            ],
            "featured": true
        },
        {
            "title": "Duck and Run",
            "startDate": "2025-04",
            "endDate": "2025-04",
            "description": "2 Player Ragdoll Physics Game",
            "technologies": [
                "C#",
                "Unity",
                "Jira"
            ],
            "categories": [
                "game"
            ],
            "highlights": [
                "2 Week Game Jam",
                "Input Action System for controller support",
                "Custom Ragdoll Logic"
            ],
            "images": [
                "/p2_gold.png"
            ],
            "githubUrl": "https://github.com/justynsmyth/duck_and_run_unity",
            "videoDemos": [
                "/duck-and-run.mp4"
            ]
        },
        {
            "title": "Zelda NES Remake",
            "startDate": "2025-02",
            "endDate": "2025-02",
            "description": "classic 8-bit zelda dungeon with custom portal gun and companion cube",
            "technologies": [
                "C#",
                "Unity",
                "Jira"
            ],
            "categories": [
                "game"
            ],
            "highlights": [
                "2 Person Project, focusing on projectiles and weapons"
            ],
            "images": [
                "/zeldaScreen.png"
            ],
            "githubUrl": "https://github.com/justynsmyth/eecs494_p1"
        },
        {
            "title": "Dueler's Providence",
            "startDate": "2025-05",
            "endDate": "2025-06",
            "description": "5 person team PvE Souls-like game with a custom parry system and custom skinned-mesh slicer",
            "technologies": [
                "C#",
                "Unity",
                "Jira"
            ],
            "categories": [
                "game"
            ],
            "highlights": [
                "designed 2 custom map levels",
                "Created Skinned Mesh Slicer capable of slicing 1000+ triangles and vertices asynchronously (Github)"
            ],
            "images": [
                "/sword-1.png",
                "/sword-2.png",
                "/sword-map1.png",
                "/sword-map2.png",
                "/sword-tool.png",
                "/sword-slice.mp4"
            ],
            "externalURL": "https://aksheyd.itch.io/providence",
            "videoDemos": [
                "https://www.youtube.com/watch?v=Tsy3BGMl7y0"
            ],
            "githubUrl": "https://github.com/justynsmyth/Providence_Slicer",
            "featured": true
        },
        {
            "title": "A2-Go: Pokemon Go Clone",
            "startDate": "2023-10",
            "endDate": "2023-11",
            "description": "2 person team project to plant trees across campus",
            "technologies": [
                "C#",
                "AR",
                "Unity",
                "Jira",
                "MapBox API"
            ],
            "categories": [
                "game"
            ],
            "highlights": [
                "using a university bus tracking API as a game feature",
                "MapBox API and Augemented Reality for game interaction"
            ],
            "videoDemos": [
                "https://www.youtube.com/watch?v=VsGm_ErYbZY"
            ]
        },
        {
            "title": "Drummvr VR Accessibility Project",
            "startDate": "2023-11",
            "endDate": "2023-12",
            "description": "4 person team project for Muscular Dystrophy Patients to play drum set",
            "technologies": [
                "C++",
                "VR",
                "Unreal Engine",
                "Jira",
                "Blueprints"
            ],
            "categories": [
                "game"
            ],
            "highlights": [
                "Created a FL Studio MIDI to Unreal Engine tool for music layout"
            ],
            "images": [
                "/drummvr.mp4"
            ]
        },
        {
  "title": "Multi-Threaded Pizza Delivery Service Simulator",
  "startDate": "2025-01",
  "endDate": "2025-01",
  "description": "Simulates a pizza delivery system using C++ threads for drivers, customers, and a manager. Handles concurrent order assignments and delivery tracking.",
  "technologies": [
    "C++",
    "Multithreading",
    "Mutex",
    "Condition Variables",
    "OS"
  ],
  "categories": [
    "backend"
  ],
  "highlights": [
    "Shared mutex synchronization for Drivers and Customers",
    "Mesa style monitor system when using condition variables"
  ]
},
{
      "title": "Custom User-Level Thread Library (Multi-core)",
      "startDate": "2025-02",
      "endDate": "2025-02",
      "description": "Implemented a multi-core user-level threading library in C++ using ucontext.",
      "technologies": [
        "C++",
        "ucontext",
        "Multithreading",
        "CV and Mutexes",
        "OS"
      ],
      "categories": [
        "backend"
      ],
      "highlights": [
            "CPU scheduler with timer interrupts",
            "Manual context switching with Linux `ucontext`",
            "Multi-CPU simulation",
            "Atomic operations with interrupt guards"
        ],
      "featured": true
    },
    {
  "title": "Virtual Memory Pager",
  "startDate": "2025-03",
  "endDate": "2025-04",
  "description": "Implemented a virtual memory pager that simulates OS memory management, including page allocation, eviction, copy-on-write, and file-backed/swap-backed pages for multiple processes.",
  "technologies": ["C++", "File I/O", "Data Structures", "OS"],
  "categories": ["backend"],
  "highlights": [
    "custom clock-based page eviction",
    "file-backed and swap-backed pages with copy-on-write semantics",
    "Simulated multi-process shared pages",
    "Handled page faults, page allocation, and swap file I/O"
  ],
  "featured": true
},
{
  "title": "Primary-Backup Key-Value Store",
  "startDate": "2024-10",
  "endDate": "2024-10",
  "description": "Implemented a fault-tolerant distributed key-value store using a primary-backup replication model with a view service to manage roles",
  "technologies": ["Golang", "RPC", "Concurrency", "Channels", "Distributed Systems"],
  "categories": ["backend"],
  "highlights": [
    "operation cache to store client operations and ensure idempotency across retries.",
    "ViewServer handling server failures, promotions, and view transitions automatically.",
    "RPCs for synchronizing backup state and forwarding writes from primary to backup.",
    "Monitor server liveness and ensure backup readiness before processing client requests."
  ]
},
{
  "title": "KVPaxos",
  "startDate": "2024-10",
  "endDate": "2024-11",
  "description": "Implemented a Key-Value store using Paxos for distributed consensus",
  "technologies": ["Golang", "Distributed Systems", "Paxos"],
  "categories": ["backend"],
  "highlights": [
    "Managed Paxos consensus across multiple nodes",
    "Ensured consistency and duplication prevention across distributed clients"
  ],
  "featured": true
},
{
  "title": "Distributed Sharded Key-Value Store",
  "startDate": "2024-11",
  "endDate": "2024-12",
  "description": "Implemented a fault-tolerant, sharded key-value store using Paxos for consensus.",
  "technologies": ["Golang", "Paxos", "RPC", "Concurrency", "Distributed Systems", "Goroutine"],
  "categories": ["backend"],
  "highlights": [
    "Implemented shard assignment and shard redistribution across groups according to configurations.",
    "ShardMaster to coordinate shard assignments and maintain configuration history with Paxos consensus.",
    "Ensured eventual consistency and fault-tolerance by applying operations through Paxos and maintaining client and shard state across replicas.",
    "Added logging with ANSI colors to track operations, warnings, and shard assignments for easier debugging in a distributed environment."
  ],
  "featured": true
},
{
  "title": "Instagram + Search Engine Client-Side",
  "startDate": "2023-10",
  "endDate": "2023-12",
  "description": "Implemented Instagram with a built in Search Engine; Uses a Flask REST API.",
  "technologies": ["React", "JavaScript", "Flask", "REST API", "SQLite", "HTML+CSS", "TF-IDF", "PageRank", "MapReduce"],
  "categories": ["frontend"],
  "highlights": [
    "Implemented likes and comments with instant UI updates (no reloads)",
    "Added infinite scroll to fetch additional posts",
    "auto-refresh time stamps",
    "Handled authentication state with redirects",
    "Implemented a simple search engine using TF-IDF and PageRank algorithms"
  ],
  "images": ["/insta2.png"]
},
{
  "title": "ZoeDAM: Zero-Shot Monocular Depth Perception Model",
  "startDate": "2022-08",
  "endDate": "2024-04",
  "description": "Research project under OpenMI, a University of Michigan machine learning organization. Developed ZoeDAM, a novel zero-shot depth estimation model that extends ZoeDepth by incorporating Depth Anything’s training methodology with a DINOv2 encoder. Achieved improved depth accuracy through teacher-student distillation and unlabeled dataset augmentation.",
  "technologies": ["Python", "PyTorch", "Vision Transformers", "ZoeDepth", "Depth Anything", "DenseDepth"],
  "categories": ["Computer Vision"],
  "highlights": [
    "Improved depth estimation RMSE from ZoeDepth’s 0.270 to 0.206 by combining ZoeDepth’s encoder-decoder with Depth Anything’s approach.",
    "Designed ZoeDAM with a DINOv2 encoder initialized using DAM checkpoints, enhancing robustness.",
    "Implemented ZoeDAM+ to leverage pseudo-depth labels from unlabeled datasets (BDD100K, LSUN) via teacher-student training.",
    "Used strong perturbations and CutMix augmentations to improve generalization on unseen data."
  ],
    "externalURL" : "https://drive.google.com/file/d/1qYlCRZmg7wHBMRoKK4gctfxWeBFOul-i/view?usp=sharing",
    "featured": true
},
{
  "title": "AniRef-YOLOv8: Anime Character Detection and Reference Extraction",
  "startDate": "2022-01",
  "endDate": "2022-03",
  "description": "Developed an AI-powered toolchain that helps artists extract reference images from anime videos",
  "technologies": ["YOLOv8", "DeepDanbooru", "Real-ESRGAN", "Gradio", "Python", "PyTorch"],
  "categories": ["Computer Vision"],
  "highlights": [
    "Trained YOLOv8 models on 10K manually annotated anime images (40K with augmentation) for character detection.",
    "Integrated DeepDanbooru tagging and Real-ESRGAN upscaling for high-quality reference extraction.",
    "Achieved up to 52.9 mAP@50–95 on test set"
  ],
  "githubUrl" : "https://github.com/SoulflareRC/AniRef-yolov8"
}
    ]
}
